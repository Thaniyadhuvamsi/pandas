version: 2.1

jobs:
  test-arm:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.large
    environment:
      ENV_FILE: ci/deps/circle-310-arm64.yaml
      PYTEST_WORKERS: auto
      PATTERN: "not single_cpu and not slow and not network and not clipboard and not arm_slow and not db"
      PYTEST_TARGET: "pandas"
      PANDAS_CI: "1"
    steps:
      - checkout
      - run: .circleci/setup_env.sh
      - run: |
          export PATH=$HOME/miniconda3/envs/pandas-dev/bin:$HOME/miniconda3/condabin:$PATH
          export LD_PRELOAD=$HOME/miniconda3/envs/pandas-dev/lib/libgomp.so.1:$LD_PRELOAD
          ci/run_tests.sh

  linux-musl:
    docker:
      - image: quay.io/pypa/musllinux_1_1_aarch64
    resource_class: arm.large
    steps:
      - run: |
          apk update
          apk add git musl-locales
      - checkout
      - run: |
          /opt/python/cp311-cp311/bin/python -m venv ~/virtualenvs/pandas-dev
          . ~/virtualenvs/pandas-dev/bin/activate
          python -m pip install --no-cache-dir -U pip wheel setuptools meson-python==0.13.1 meson[ninja]==1.2.1
          python -m pip install --no-cache-dir versioneer[toml] cython numpy python-dateutil pytz pytest>=7.3.2 pytest-xdist>=2.2.0 hypothesis>=6.46.1
          python -m pip install --no-cache-dir --no-build-isolation -e . --config-settings=setup-args="--werror"
          python -m pip list --no-cache-dir
      - run: |
          . ~/virtualenvs/pandas-dev/bin/activate
          export PANDAS_CI=1
          python -m pytest -m 'not slow and not network and not clipboard and not single_cpu' pandas --junitxml=test-data.xml

  build-aarch64:
    parameters:
      cibw-build: &cibw-build
        - "cp39-manylinux_aarch64"
        - "cp310-manylinux_aarch64"
        - "cp311-manylinux_aarch64"
        - "cp312-manylinux_aarch64"
        - "cp39-musllinux_aarch64"
        - "cp310-musllinux_aarch64"
        - "cp311-musllinux_aarch64"
        - "cp312-musllinux_aarch64"
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.large
    environment:
      TRIGGER_SOURCE: << pipeline.trigger_source >>
    steps:
      - checkout
      - run:
          name: Check if build is necessary
          command: |
            if [[ -n "$CIRCLE_TAG" ]]; then
                echo 'export IS_PUSH="true"' >> "$BASH_ENV"
            elif [[ $TRIGGER_SOURCE == "scheduled_pipeline" ]]; then
                echo 'export IS_SCHEDULE_DISPATCH="true"' >> "$BASH_ENV"
            elif (git log --format=oneline -n 1 $CIRCLE_SHA1) | grep -q '\[wheel build\]'; then
                : # Do nothing
            elif ! (curl https://api.github.com/repos/pandas-dev/pandas/issues/$CIRCLE_PR_NUMBER | jq '.labels' | grep -q 'Build'); then
                circleci-agent step halt
            fi
      - run:
          name: Build aarch64 wheels
          no_output_timeout: 30m
          command: |
            pip3 install cibuildwheel==2.15.0
            if [[ "$IS_SCHEDULE_DISPATCH" == "true" || "$IS_PUSH" != 'true' ]]; then
                export CIBW_ENVIRONMENT="PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple"
            fi
            cibuildwheel --prerelease-pythons --output-dir wheelhouse

          environment:
            CIBW_BUILD: *cibw-build

      - run:
          name: Install Anaconda Client & Upload Wheels
          command: |
            MAMBA_URL="https://github.com/conda-forge/miniforge/releases/download/23.1.0-0/Mambaforge-23.1.0-0-Linux-aarch64.sh"
            wget -q $MAMBA_URL -O minimamba.sh
            chmod +x minimamba.sh

            MAMBA_DIR="$HOME/miniconda3"
            rm -rf $MAMBA_DIR
            ./minimamba.sh -b -p $MAMBA_DIR

            export PATH=$MAMBA_DIR/bin:$PATH

            mamba install -y -c conda-forge anaconda-client

            source ci/upload_wheels.sh
            set_upload_vars
            upload_wheels
      - store_artifacts:
          path: wheelhouse/

workflows:
  test:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - test-arm
  test-musl:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - linux-musl
  build-wheels:
    jobs:
      - build-aarch64:
          filters:
            tags:
              only: /^v.*/
          matrix:
            parameters:
              cibw-build: *cibw-build

